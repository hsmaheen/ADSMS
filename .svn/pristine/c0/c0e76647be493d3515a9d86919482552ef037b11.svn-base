using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;

namespace ADSMS.DataAccess
{
    public class Repository_phyo
    {
        stationeryEntities cntx = new stationeryEntities();

        public List<object> getAllRequisitionByEid(int eid)
        {
            try
            {
                List<object> obj = new List<object>();
                var q = (from r in cntx.requisitions
                         join rd in
                             (from b in cntx.requisitiondetails
                              group b by b.ReqID into g
                              select new { ReqID = g.Key, qtySum = g.Sum(x => x.ReqQuantityReq) })
                             on r.ReqID equals rd.ReqID
                         where r.ReqEmpId == eid
                         orderby r.ReqDate descending
                         select new
                         {
                             ReqID = r.ReqID,
                             reqDate = r.ReqDate,
                             ReqStatus = r.ReqStatus,
                             ReqApproveDate = r.ReqApproveDate,
                             qtySum = rd.qtySum
                         });
                obj = q.ToList<object>();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<object> getAllItem()
        {
            try
            {
                List<object> itm = new List<object>();
                itm = cntx.items.ToList<object>();
                return itm;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void DeleteRequisitionAll(int reqId)
        {
            List<requisitiondetail> dd = new List<requisitiondetail>();
            try
            {
                var d = (from a in cntx.requisitiondetails where a.ReqID==reqId select a);
                dd = d.ToList();
                foreach (var detail in dd)
                {
                    cntx.requisitiondetails.Remove(detail);
                }
                var req = cntx.requisitions.FirstOrDefault(f => f.ReqID == reqId);
                if (req != null)
                {
                    cntx.requisitions.Remove(req);

                }
                cntx.SaveChanges();           
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int createRequisition(requisition r)
        {
            try
            {
                requisition req = new requisition();
                req.ReqEmpId = r.ReqEmpId;
                req.ReqStatus = r.ReqStatus;
                req.ReqDate = r.ReqDate;
                req.ReqDepID = r.ReqDepID;
                cntx.requisitions.Add(req);
                cntx.SaveChanges();
                int id = req.ReqID;
                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void createRequisitionDetails(requisitiondetail rd)
        {
            try
            {
                requisitiondetail detail = new requisitiondetail();
                detail.ReqID = rd.ReqID;
                detail.ReqItemID = rd.ReqItemID;
                detail.ReqQuantityReq = rd.ReqQuantityReq;
                cntx.requisitiondetails.Add(detail);
                cntx.SaveChanges();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int getDepIdByEid(int eid)
        {
            try
            {
                return (int)(from h in cntx.employees
                             where h.EmployeeID.Equals(eid)
                             select h.EmployeeDepId).FirstOrDefault();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public requisition ShowRequisitionDetail(int reqId)
        {
            requisition rr = new requisition();
            try
            {
                var q = (from f in cntx.requisitions
                        where f.ReqID == reqId //&& f.ReqStatus!="pending"
                            select f).FirstOrDefault();
                rr = q;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rr;
        }

        public List<object> ShowAllRequisitionDetailById(int rid)
        {
            List<object> itm = new List<object>();
            try
            {
                var q = (from f in cntx.requisitiondetails
                         join i in cntx.items on f.ReqItemID equals i.ItemID
                         where f.ReqID == rid //&& f.ReqStatus!="pending"
                         orderby f.ReqItemID descending
                         select new{itemid=f.ReqItemID,name=i.ItemDescription,qty=f.ReqQuantityReq}).ToList<object> ();
                itm = q;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return itm;
        }

        public bool getRequisitionByStatus(int reqId)
        {
            try
            {
                var q=(from h in cntx.requisitions
                             where h.ReqStatus.Equals("pending") && h.ReqID.Equals(reqId)
                             select h).FirstOrDefault();
                if (q != null)
                {//pending
                    return true;
                }
                else
                {//approve
                    return false;
                } 
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
