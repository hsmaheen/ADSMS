using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using System.Diagnostics;

namespace ADSMS.DataAccess
{
    public class DepartmentRepository
    {
       
        stationeryEntities se = new stationeryEntities();
        DateTime checkdate = new DateTime();
    
        public List<object> getDeptList()
        {


            List<object> deptList = new List<object>();
            var q = from dept in se.departments
                    join cp in se.collectionPoints
                        on dept.DepCollectionPointID equals cp.CollectionPointID
                    select new { dept.DepID, dept.DepContactName, dept.DepContactNumber, dept.DepFax, cp.CollectionPointName };

            deptList = q.ToList<object>();

            return deptList;
        }

        //---method to get requisition list
        public List<object> getRequests()
        {



            checkdate = DateTime.Today;
            //checkdate = DateTime.Today.AddDays(2);
            List<Object> rlist = new List<Object>();
            var q = from rd in se.requisitiondetails
                    from req in se.requisitions
                    from i in se.items
                    where
                  rd.ReqStatus == "approved" &&
                  req.ReqApproveDate < checkdate &&
                 rd.requisition.ReqStatus != null &&
                 i.ItemID == rd.ReqItemID &&
                 rd.ReqID == req.ReqID
                    group new { i, rd } by new
                    {
                        i.ItemID,
                        i.ItemDescription
                    } into g
                    select new
                    {
                        ItemID = (System.Int32)g.Key.ItemID,
                        g.Key.ItemDescription,
                        Order_Quantity = (System.Int32)g.Sum(p => p.rd.ReqQuantityReq)
                    };

            rlist = q.ToList<Object>();
            return rlist;

        }

        public department GetdepartmentDetailsByDeptID(int searchDeptID)
        {
            try
            {
                department CurrentDept = new department();

                CurrentDept = (from r in se.departments
                               where r.DepID == searchDeptID
                               select r).FirstOrDefault();
                return CurrentDept;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public List<object> GetItembyDep(int itemiD)
        {

            checkdate = DateTime.Today;
            //checkdate = DateTime.Today.AddDays(2);
            List<object> depitems = new List<object>();
            depitems = se.getReqbyDep(itemiD, checkdate).ToList<object>();
            return depitems;

        }

        //method to manage outstanding requests

        public void CheckForOutStanding(Disbursement_M disbl)
        {
            List<requisitiondetail> rdlist = new List<requisitiondetail>();

            int totalcount = 0;
            checkdate = DateTime.Today;
            //checkdate = DateTime.Today.AddDays(2);
            requisitiondetail rcheck = new requisitiondetail();
            var m = from r in se.requisitiondetails
                    where
                    r.ReqItemID == disbl.ItemID &&
                    r.requisition.ReqDepID == disbl.DepID &&
                    r.requisition.ReqApproveDate < checkdate
                    select r;
            rdlist = m.ToList();
            rcheck = m.FirstOrDefault();
            foreach (requisitiondetail rd in rdlist)
            {
                //changing the status to confirmed
                rd.ReqStatus = "confirmed";
                se.SaveChanges();
                totalcount = totalcount + rd.ReqQuantityReq; //getting the count of items ordered by the dep
            }
            if (disbl.QuantinHand < totalcount)
            {
                int outstanding = disbl.RequiredQuant - disbl.QuantinHand;
                requisition outreq = new requisition();
                requisitiondetail outreqdet = new requisitiondetail();

                //creating an oustanding request automatically
                outreq.ReqApproveEmpID = rcheck.requisition.ReqApproveEmpID;
                //int id = Convert.ToInt32(rcheck.requisition.ReqApproveEmpID);
                outreq.ReqApproveDate = DateTime.Today;
                outreq.ReqStatus = "outstanding";
                outreq.ReqDate = DateTime.Today;
                outreq.ReqDepID = rcheck.requisition.ReqDepID;
                outreq.ReqEmpId = rcheck.requisition.ReqEmpId;
                outreq.ReqReason = "outstanding";
                try
                {
                    se.requisitions.Add(outreq);
                    se.SaveChanges();
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }


                //creating an autogenerated requestdetails for that particular item
                outreqdet.ReqID = outreq.ReqID;
                outreqdet.ReqItemID = disbl.ItemID;
                outreqdet.ReqQuantityReq = outstanding;
                outreqdet.ReqStatus = "approved";
                try
                {
                    se.requisitiondetails.Add(outreqdet);
                    se.SaveChanges();
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }
            }
        }

        public bool saveDisblist(Disbursement_M disbl)
        {
            bool ans = false;
            List<requisitiondetail> rdlist = new List<requisitiondetail>();
            //requisitiondetail rd =new requisitiondetail();
            disbursementdetail disbdet = new disbursementdetail();
            disbursement disb = new disbursement();
            item newitem = new item();

            var q = from d in se.disbursements
                    where d.DisbDepID == disbl.DepID
                    select d;
            disb = q.FirstOrDefault();

            if (disb != null)
            {

                var a = from i in se.items
                        where i.ItemID == disbl.ItemID
                        select i;
                newitem = a.FirstOrDefault();


                disbdet.DisbID = disb.DisbID;
                disbdet.DisbItemID = disbl.ItemID;
                disbdet.DisbItemQuantDelivered = disbl.QuantinHand;
                disbdet.DisbItemQuantReq = disbl.RequiredQuant;



                try
                {
                    se.disbursementdetails.Add(disbdet);
                    se.SaveChanges();
                    ans = true;

                }
                catch (DbUpdateException dbEx)
                {
                    ans = false;
                    string message;
                    Exception e = new Exception();
                    e = dbEx.InnerException;

                    message = e.Message;

                }
                if (ans == true)
                {
                    CheckForOutStanding(disbl);
                }
                ans = true;

            }
            else
            {
                //creating a disbursement
                disbursement disb1 = new disbursement();
                disb1.DisbDepID = disbl.DepID;
                disb1.DisbStatus = "Pending";
                disb1.DisbReceiveDate = null;
                se.disbursements.Add(disb1);
                se.SaveChanges();

                //creating a Disbursement details

                disbdet.DisbID = disb1.DisbID;
                disbdet.DisbItemID = disbl.ItemID;
                disbdet.DisbItemQuantDelivered = disbl.QuantinHand;
                disbdet.DisbItemQuantReq = disbl.RequiredQuant;
                se.disbursementdetails.Add(disbdet);
                try
                {
                    se.SaveChanges();
                    ans = true;
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }

                if (ans == true)
                {
                    CheckForOutStanding(disbl);
                    ans = true;
                }
            }

            return ans;

        }
    }
}
